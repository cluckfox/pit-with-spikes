#
# Linker script for UOROM (2 Mbit)
# Copyright 2010 Damian Yerrick
#
# Copying and distribution of this file, with or without
# modification, are permitted in any medium without royalty
# provided the copyright notice and this notice are preserved.
# This file is offered as-is, without any warranty.
#
# Modified by Cluckfox in 2021 for UNROM512
MEMORY {
  ZP:     start = $10, size = $f0, type = rw;
  # use first $10 zeropage locations as locals
  HEADER: start = 0, size = $0010, type = ro, file = %O, fill=yes, fillval=$00;
  RAM:    start = $0300, size = $0500, type = rw;
  ROM00:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$00;
  ROM01:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$01;
  ROM02:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$02;
  ROM03:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$03;
  ROM04:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$04;
  ROM05:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$05;
  ROM06:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$06;
  ROM07:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$07;
  ROM08:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$08;
  ROM09:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$09;
  ROM10:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$0a;
  ROM11:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$0b;
  ROM12:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$0c;
  ROM13:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$0d;
  ROM14:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$0e;
  ROM15:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$0f;
  ROM16:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$10;
  ROM17:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$11;
  ROM18:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$12;
  ROM19:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$13;
  ROM20:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$14;
  ROM21:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$15;
  ROM22:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$16;
  ROM23:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$17;
  ROM24:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$18;
  ROM25:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$19;
  ROM26:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$1a;
  ROM27:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$1b;
  ROM28:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$1c;
  ROM29:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$1d;
  ROM30:  start = $8000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$1e;
  ROM31:  start = $C000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF, bank=$1f;
}

SEGMENTS {
  ZEROPAGE: load = ZP, type = zp;
  BSS:      load = RAM, type = bss, define = yes, align = $100;

  INESHDR:  load = HEADER, type = ro, align = $10;
  DATA00:   load = ROM00, type = ro, align = $100, optional = yes;
  CODE00:   load = ROM00, type = ro, align = $100, optional = yes;
  BANK01:   load = ROM01, type = ro, align = $100, optional = yes;
  BANK02:   load = ROM02, type = ro, align = $100, optional = yes;
  BANK03:   load = ROM03, type = ro, align = $100, optional = yes;
  BANK04:   load = ROM04, type = ro, align = $100, optional = yes;
  BANK05:   load = ROM05, type = ro, align = $100, optional = yes;
  BANK06:   load = ROM06, type = ro, align = $100, optional = yes;
  BANK07:   load = ROM07, type = ro, align = $100, optional = yes;
  BANK08:   load = ROM08, type = ro, align = $100, optional = yes;
  BANK09:   load = ROM09, type = ro, align = $100, optional = yes;
  BANK10:   load = ROM10, type = ro, align = $100, optional = yes;
  BANK11:   load = ROM11, type = ro, align = $100, optional = yes;
  BANK12:   load = ROM12, type = ro, align = $100, optional = yes;
  BANK13:   load = ROM13, type = ro, align = $100, optional = yes;
  BANK14:   load = ROM14, type = ro, align = $100, optional = yes;
  BANK15:   load = ROM15, type = ro, align = $100, optional = yes;
  BANK16:   load = ROM16, type = ro, align = $100, optional = yes;
  BANK17:   load = ROM17, type = ro, align = $100, optional = yes;
  BANK18:   load = ROM18, type = ro, align = $100, optional = yes;
  BANK19:   load = ROM19, type = ro, align = $100, optional = yes;
  BANK20:   load = ROM20, type = ro, align = $100, optional = yes;
  BANK21:   load = ROM21, type = ro, align = $100, optional = yes;
  BANK22:   load = ROM22, type = ro, align = $100, optional = yes;
  BANK23:   load = ROM23, type = ro, align = $100, optional = yes;
  BANK24:   load = ROM24, type = ro, align = $100, optional = yes;
  BANK25:   load = ROM25, type = ro, align = $100, optional = yes;
  BANK26:   load = ROM26, type = ro, align = $100, optional = yes;
  BANK27:   load = ROM27, type = ro, align = $100, optional = yes;
  BANK28:   load = ROM28, type = ro, align = $100, optional = yes;
  BANK29:   load = ROM29, type = ro, align = $100, optional = yes;
  BANK30:   load = ROM30, type = ro, align = $100, optional = yes;
  DMC:      load = ROM31, type = ro, align = 64, optional = yes;
  CODE:     load = ROM31, type = ro, align = $100;
  RODATA:   load = ROM31, type = ro, align = $100;

  # Because UNROM512 (mapper 30) has a fixed bank at $C000-$FFFF,
  # we need not include the reset stub in all banks.
  VECTORS:  load = ROM31, type = ro, start = $FFFA;
}

FILES {
  %O: format = bin;
}

